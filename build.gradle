plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.4'
}

static def getBuildNumber() {
    def buildNumber = System.env.TRAVIS_BUILD_NUMBER?.toInteger()
    return buildNumber ?: 0
}
ext.buildNumber = getBuildNumber()

allprojects {
    apply plugin: 'jacoco'
    jacoco {
        toolVersion = '0.8.4'
    }
    repositories {
        jcenter()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    group = 'org.yunshanmc'
    version = "$pluginVersion.${rootProject.ext.buildNumber}-$pluginVersionType"

    targetCompatibility = 1.8
    sourceCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs = ['-parameters', '-Xlint:deprecation', '-Xlint:unchecked']
    }

    def jacocoExecutionDataFiles = fileTree(buildDir).include("/jacoco/*.exec")
    jacocoTestReport {
        executionData.from jacocoExecutionDataFiles
    }

    javadoc {
        options.encoding "UTF-8"
        options.charSet 'UTF-8'
        options.links("http://docs.oracle.com/javase/8/docs/api/")
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    repositories {
        maven {
            name 'Aliyun Maven Center'
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
        }
        maven {
            name 'Aliyun JCenter'
            url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
        }
        maven {
            name 'SpigotMC'
            url 'https://hub.spigotmc.org/nexus/content/groups/public/'
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.10'
        annotationProcessor 'org.projectlombok:lombok:1.18.10'
        
        compileOnly 'com.google.guava:guava:22.0'
        compileOnly 'org.yaml:snakeyaml:1.25'
        compileOnly 'io.netty:netty-all:4.1.21.Final'

        // ORM: ORMLite
        implementation 'com.j256.ormlite:ormlite-core:5.1'
        implementation 'com.j256.ormlite:ormlite-jdbc:5.1'
        // CGLIB
        implementation('cglib:cglib:3.2.6') {
            exclude group: 'org.apache.ant', module: 'ant'
        }

        testCompileOnly 'org.projectlombok:lombok:1.18.10'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.10'
        testImplementation 'junit:junit:4.12'
        testImplementation 'org.yaml:snakeyaml:1.18'
        testImplementation 'com.google.guava:guava:22.0'
        testImplementation 'io.netty:netty-all:4.1.21.Final'
    }

    publishing {
        publications {
            Plugin(MavenPublication) {
                groupId project.group
                version project.version

                afterEvaluate {
                    artifactId archivesBaseName
                }

                from components.java

                artifact sourcesJar
                artifact javadocJar
            }
        }
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn subprojects.test

    additionalSourceDirs.from files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from files(subprojects.sourceSets.main.output)
    
    executionData.from files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    onlyIf { System.env.'CI' }
}

task deleteEmptyJar() {
    doLast {
        file('build/libs/LMC-Core.jar').delete()
    }
}

rootProject.assemble.finalizedBy deleteEmptyJar